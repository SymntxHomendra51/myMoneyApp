import React, { forwardRef, useEffect, useRef, useState } from 'react';
import { AccessibilityInfo, Animated, Image, Pressable, StyleSheet, Text, View } from 'react-native';
import { BORDER_WIDTH, COLORS, FONT_SIZE, PADDING, SHAPE } from '../../constants/styles';
import { isAndroid } from '../../helpers';
import { Action } from '../../state/types';
import { ClearOption } from '../clear-option';
import { MultiSelect } from '../multi-select';
import { SelectInput } from '../select-input';

const arrowImage = require('./../../assets/icons/chevron-down.png');

export const SelectControl = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    isOpened,
    animated,
    animationDuration,
    selectControlStyle,
    selectedOption,
    onPressSelectControl,
    dispatch,
    clearable,
    options,
    disabled,
    multiSelection,
    placeholderText,
    placeholderTextColor,
    searchable,
    searchPattern,
    searchValue,
    setPosition,
    selectControlArrowImageStyle,
    selectControlDisabledStyle,
    selectControlClearOptionButtonHitSlop,
    selectControlClearOptionButtonStyle,
    selectControlClearOptionImageStyle,
    selectControlClearOptionA11yLabel,
    selectControlOpenDropdownA11yLabel,
    selectControlButtonsContainerStyle,
    multiSelectionOptionStyle,
    hideSelectControlArrow,
    onSelect,
    onRemove,
    selectControlTextStyle,
    aboveSelectControl,
    customLeftIconSource,
    customLeftIconStyles,
    selectedOptionIndex
  } = _ref;
  const rotateAnimation = useRef(new Animated.Value(0)).current;
  useEffect(() => {
    if (animated) {
      Animated.timing(rotateAnimation, {
        toValue: isOpened ? 1 : 0,
        duration: animationDuration,
        useNativeDriver: true
      }).start();
    }
  }, [rotateAnimation, isOpened, animated]);
  const rotate = rotateAnimation.interpolate({
    inputRange: [0, 1],
    outputRange: ['0deg', '180deg']
  });

  const onPressRemove = function () {
    let option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    if (!disabled) {
      let removedOption = selectedOption;
      let removedOptionIndex = selectedOptionIndex;

      if (multiSelection) {
        let removedSelectedOptions = [];
        removedSelectedOptions = selectedOption.filter(selected => selected.value !== option.value);

        if (removedSelectedOptions.length === 0) {
          removedSelectedOptions = null;
        }

        const foundIndex = options.findIndex(_ref2 => {
          let {
            value
          } = _ref2;
          return value === (option === null || option === void 0 ? void 0 : option.value);
        });
        removedOptionIndex = foundIndex;
        removedOption = option;
        const resolveSelectedOptionIndex = selectedOptionIndex.filter(item => item !== foundIndex);
        dispatch({
          type: Action.SelectOption,
          payload: {
            selectedOption: removedSelectedOptions,
            selectedOptionIndex: (resolveSelectedOptionIndex === null || resolveSelectedOptionIndex === void 0 ? void 0 : resolveSelectedOptionIndex.length) > 0 ? resolveSelectedOptionIndex : -1
          }
        });
      } else {
        dispatch({
          type: Action.SelectOption,
          payload: {
            selectedOption: null,
            selectedOptionIndex: -1
          }
        });

        if (searchable) {
          dispatch({
            type: Action.SetSearchValue,
            payload: ''
          });
        }

        dispatch({
          type: Action.SetOptionsData,
          payload: options
        });
      }

      if (onSelect) {
        onSelect(null, -1);
      }

      if (onRemove) {
        onRemove(removedOption, removedOptionIndex);
      }
    }
  };

  const [isScreenReaderEnabled, setIsScreenReaderEnabled] = useState(false);
  useEffect(() => {
    if (!isAndroid) {
      AccessibilityInfo.isScreenReaderEnabled().then(e => {
        setIsScreenReaderEnabled(e);
      });
      AccessibilityInfo.addEventListener('change', e => {
        setIsScreenReaderEnabled(e);
      });
    }
  }, []);
  const isShowClearOptionButton = clearable && selectedOption && !isScreenReaderEnabled;
  const isShowClearOptionButtonA11y = clearable && selectedOption && isScreenReaderEnabled && !isAndroid;

  const renderArrowImage = () => {
    const accessibilityLabel = 'Arrow for opening dropdown';
    const arrow = animated ? /*#__PURE__*/React.createElement(Animated.Image, {
      source: arrowImage,
      style: [styles.arrowIcon, {
        transform: [{
          rotate
        }]
      }, selectControlArrowImageStyle]
    }) : /*#__PURE__*/React.createElement(Image, {
      source: arrowImage,
      style: [styles.arrowIcon, isOpened ? styles.arrowIconOpened : styles.arrowIconClosed, selectControlArrowImageStyle]
    });

    if (multiSelection) {
      return /*#__PURE__*/React.createElement(Pressable, {
        accessibilityLabel: accessibilityLabel,
        onPress: disabled ? undefined : onPressSelectControl
      }, arrow);
    }

    return arrow;
  };

  const renderMultiselect = () => {
    return /*#__PURE__*/React.createElement(MultiSelect, {
      disabled: disabled,
      dispatch: dispatch,
      isOpened: isOpened,
      multiSelection: multiSelection,
      placeholderText: placeholderText,
      placeholderTextColor: placeholderTextColor,
      searchPattern: searchPattern,
      searchValue: searchValue,
      searchable: searchable,
      selectControlStyle: selectControlStyle,
      selectControlTextStyle: selectControlTextStyle,
      multiSelectionOptionStyle: multiSelectionOptionStyle,
      selectedOption: selectedOption,
      setPosition: setPosition,
      onPressRemove: onPressRemove,
      onPressSelectControl: onPressSelectControl
    });
  };

  const renderSelection = () => {
    var _StyleSheet$flatten;

    const selectedOptionTyped = selectedOption; // for proper typing

    if (searchable) {
      return /*#__PURE__*/React.createElement(SelectInput, {
        disabled: disabled,
        dispatch: dispatch,
        isOpened: isOpened,
        multiSelection: multiSelection,
        placeholderText: placeholderText,
        placeholderTextColor: placeholderTextColor,
        searchPattern: searchPattern,
        searchValue: searchValue,
        selectControlTextStyle: selectControlTextStyle,
        selectedOption: selectedOption,
        setPosition: setPosition,
        onPressSelectControl: onPressSelectControl
      });
    }

    return /*#__PURE__*/React.createElement(Text, {
      numberOfLines: 1,
      style: [styles.text, selectControlTextStyle, {
        color: selectedOptionTyped !== null && selectedOptionTyped !== void 0 && selectedOptionTyped.label ? ((_StyleSheet$flatten = StyleSheet.flatten(selectControlTextStyle)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.color) || COLORS.BLACK : placeholderTextColor
      }]
    }, (selectedOptionTyped === null || selectedOptionTyped === void 0 ? void 0 : selectedOptionTyped.label) || placeholderText);
  };

  const resolveAccessibilityHint = () => {
    if (!selectedOption) {
      return undefined;
    }

    if (!multiSelection) {
      const selectedOptionTyped = selectedOption; // for proper typing

      return `Current selected item is ${selectedOptionTyped === null || selectedOptionTyped === void 0 ? void 0 : selectedOptionTyped.label}`;
    }

    return 'You have selected multiple items';
  };

  const resolveContainer = () => {
    if (multiSelection && selectedOption) {
      return {
        Component: View
      };
    }

    return {
      Component: Pressable
    };
  };

  const {
    Component
  } = resolveContainer();
  const shouldRenderClearButton = isShowClearOptionButton && !multiSelection;
  const shouldRenderClearButtonA11y = isShowClearOptionButtonA11y && !multiSelection;
  return /*#__PURE__*/React.createElement(View, {
    style: styles.rootView
  }, /*#__PURE__*/React.createElement(Component, {
    ref: ref,
    accessibilityHint: resolveAccessibilityHint(),
    accessibilityLabel: isOpened ? '' : selectControlOpenDropdownA11yLabel || 'Open a dropdown',
    style: [styles.container, isOpened ? aboveSelectControl ? styles.openedAbove : styles.opened : {}, selectControlStyle, disabled ? [styles.disabled, selectControlDisabledStyle] : {}],
    onPress: disabled || multiSelection && selectedOption ? undefined : onPressSelectControl
  }, !!customLeftIconSource && /*#__PURE__*/React.createElement(View, {
    style: [styles.leftIconWrapper, styles.xIconWrapper]
  }, /*#__PURE__*/React.createElement(Image, {
    source: customLeftIconSource,
    style: customLeftIconStyles
  })), /*#__PURE__*/React.createElement(View, {
    style: [styles.press, multiSelection ? styles.pressMultiSelection : styles.pressNormal]
  }, multiSelection ? renderMultiselect() : renderSelection()), /*#__PURE__*/React.createElement(View, {
    style: [styles.iconsContainer, selectControlButtonsContainerStyle]
  }, shouldRenderClearButton && /*#__PURE__*/React.createElement(ClearOption, {
    disabled: disabled,
    selectControlClearOptionA11yLabel: selectControlClearOptionA11yLabel,
    selectControlClearOptionButtonHitSlop: selectControlClearOptionButtonHitSlop,
    selectControlClearOptionButtonStyle: selectControlClearOptionButtonStyle,
    selectControlClearOptionImageStyle: selectControlClearOptionImageStyle,
    onPressRemove: onPressRemove
  }), !hideSelectControlArrow && renderArrowImage())), shouldRenderClearButtonA11y && /*#__PURE__*/React.createElement(View, {
    style: styles.a11IconWrapper
  }, /*#__PURE__*/React.createElement(ClearOption, {
    disabled: disabled,
    selectControlClearOptionA11yLabel: selectControlClearOptionA11yLabel,
    selectControlClearOptionButtonHitSlop: selectControlClearOptionButtonHitSlop,
    selectControlClearOptionButtonStyle: selectControlClearOptionButtonStyle,
    selectControlClearOptionImageStyle: selectControlClearOptionImageStyle,
    onPressRemove: onPressRemove
  })));
});
const styles = StyleSheet.create({
  rootView: {
    position: 'relative'
  },
  container: {
    height: 40,
    flexDirection: 'row',
    borderRadius: SHAPE,
    borderWidth: BORDER_WIDTH,
    backgroundColor: COLORS.WHITE
  },
  press: {
    flex: 1,
    height: '100%',
    paddingHorizontal: PADDING,
    justifyContent: 'center'
  },
  pressMultiSelection: {
    paddingRight: 40
  },
  pressNormal: {
    paddingRight: 55
  },
  disabled: {
    backgroundColor: COLORS.DISABLED
  },
  text: {
    fontSize: FONT_SIZE,
    textAlign: 'left'
  },
  openedAbove: {
    borderTopLeftRadius: 0,
    borderTopRightRadius: 0
  },
  opened: {
    borderBottomLeftRadius: 0,
    borderBottomRightRadius: 0
  },
  iconsContainer: {
    position: 'absolute',
    right: 8,
    top: 0,
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
    height: '100%'
  },
  arrowIcon: {
    width: 25,
    height: 25,
    zIndex: -1
  },
  leftIconWrapper: {
    paddingLeft: 8
  },
  xIconWrapper: {
    height: '100%',
    justifyContent: 'center'
  },
  arrowIconOpened: {
    transform: [{
      rotate: '180deg'
    }]
  },
  arrowIconClosed: {
    transform: [{
      rotate: '0deg'
    }]
  },
  a11IconWrapper: {
    position: 'absolute',
    right: -20,
    borderWidth: 1,
    height: '100%'
  }
});
SelectControl.displayName = 'SelectControl';
//# sourceMappingURL=index.js.map