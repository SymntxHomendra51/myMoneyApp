{"version":3,"names":["React","forwardRef","useEffect","useRef","useState","AccessibilityInfo","Animated","Image","Pressable","StyleSheet","Text","View","BORDER_WIDTH","COLORS","FONT_SIZE","PADDING","SHAPE","isAndroid","Action","ClearOption","MultiSelect","SelectInput","arrowImage","require","SelectControl","ref","isOpened","animated","animationDuration","selectControlStyle","selectedOption","onPressSelectControl","dispatch","clearable","options","disabled","multiSelection","placeholderText","placeholderTextColor","searchable","searchPattern","searchValue","setPosition","selectControlArrowImageStyle","selectControlDisabledStyle","selectControlClearOptionButtonHitSlop","selectControlClearOptionButtonStyle","selectControlClearOptionImageStyle","selectControlClearOptionA11yLabel","selectControlOpenDropdownA11yLabel","selectControlButtonsContainerStyle","multiSelectionOptionStyle","hideSelectControlArrow","onSelect","onRemove","selectControlTextStyle","aboveSelectControl","customLeftIconSource","customLeftIconStyles","selectedOptionIndex","rotateAnimation","Value","current","timing","toValue","duration","useNativeDriver","start","rotate","interpolate","inputRange","outputRange","onPressRemove","option","removedOption","removedOptionIndex","removedSelectedOptions","filter","selected","value","length","foundIndex","findIndex","resolveSelectedOptionIndex","item","type","SelectOption","payload","SetSearchValue","SetOptionsData","isScreenReaderEnabled","setIsScreenReaderEnabled","then","e","addEventListener","isShowClearOptionButton","isShowClearOptionButtonA11y","renderArrowImage","accessibilityLabel","arrow","styles","arrowIcon","transform","arrowIconOpened","arrowIconClosed","undefined","renderMultiselect","renderSelection","selectedOptionTyped","text","color","label","flatten","BLACK","resolveAccessibilityHint","resolveContainer","Component","shouldRenderClearButton","shouldRenderClearButtonA11y","rootView","container","openedAbove","opened","leftIconWrapper","xIconWrapper","press","pressMultiSelection","pressNormal","iconsContainer","a11IconWrapper","create","position","height","flexDirection","borderRadius","borderWidth","backgroundColor","WHITE","flex","paddingHorizontal","justifyContent","paddingRight","DISABLED","fontSize","textAlign","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","right","top","alignItems","width","zIndex","paddingLeft","displayName"],"sources":["index.tsx"],"sourcesContent":["import React, {\n    ComponentPropsWithRef,\n    forwardRef,\n    ReactElement,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\nimport {\n    AccessibilityInfo,\n    Animated,\n    Image,\n    ImageStyle,\n    Pressable,\n    StyleSheet,\n    Text,\n    TextStyle,\n    View,\n    ViewStyle,\n} from 'react-native';\n\nimport {\n    BORDER_WIDTH,\n    COLORS,\n    FONT_SIZE,\n    PADDING,\n    SHAPE,\n} from '../../constants/styles';\nimport { isAndroid } from '../../helpers';\nimport type { OptionalToRequired } from '../../helpers/types/OptionalToRequired';\nimport type { OptionType, Select } from '../../index';\nimport { Action, DispatchType, Position, State } from '../../state/types';\nimport type { OnPressSelectControlType, OnSetPosition } from '../../types';\nimport { ClearOption } from '../clear-option';\nimport { MultiSelect } from '../multi-select';\nimport { SelectInput } from '../select-input';\n\ntype FromSelectComponentProps = Pick<\n    ComponentPropsWithRef<typeof Select>,\n    | 'selectControlStyle'\n    | 'clearable'\n    | 'animated'\n    | 'animationDuration'\n    | 'options'\n    | 'disabled'\n    | 'searchable'\n    | 'searchPattern'\n    | 'placeholderText'\n    | 'placeholderTextColor'\n    | 'selectControlDisabledStyle'\n    | 'selectControlButtonsContainerStyle'\n    | 'hideSelectControlArrow'\n    | 'multiSelection'\n    | 'onSelect'\n    | 'onRemove'\n    | 'selectControlArrowImageStyle'\n    | 'selectControlClearOptionA11yLabel'\n    | 'selectControlOpenDropdownA11yLabel'\n    | 'selectControlTextStyle'\n    | 'selectControlClearOptionButtonStyle'\n    | 'selectControlClearOptionButtonHitSlop'\n    | 'selectControlClearOptionImageStyle'\n    | 'customLeftIconSource'\n    | 'customLeftIconStyles'\n    | 'multiSelectionOptionStyle'\n>;\n\ntype SelectControlProps = OptionalToRequired<\n    {\n        onPressSelectControl: OnPressSelectControlType;\n    } & FromSelectComponentProps &\n        Pick<\n            State,\n            | 'isOpened'\n            | 'selectedOption'\n            | 'searchValue'\n            | 'selectedOptionIndex'\n        > & {\n            dispatch: DispatchType;\n        } & Pick<Position, 'aboveSelectControl'> & {\n            setPosition: OnSetPosition;\n        }\n>;\n\nconst arrowImage = require('./../../assets/icons/chevron-down.png');\n\nexport const SelectControl = forwardRef<View, SelectControlProps>(\n    (\n        {\n            isOpened,\n            animated,\n            animationDuration,\n            selectControlStyle,\n            selectedOption,\n            onPressSelectControl,\n            dispatch,\n            clearable,\n            options,\n            disabled,\n            multiSelection,\n            placeholderText,\n            placeholderTextColor,\n            searchable,\n            searchPattern,\n            searchValue,\n            setPosition,\n            selectControlArrowImageStyle,\n            selectControlDisabledStyle,\n            selectControlClearOptionButtonHitSlop,\n            selectControlClearOptionButtonStyle,\n            selectControlClearOptionImageStyle,\n            selectControlClearOptionA11yLabel,\n            selectControlOpenDropdownA11yLabel,\n            selectControlButtonsContainerStyle,\n            multiSelectionOptionStyle,\n            hideSelectControlArrow,\n            onSelect,\n            onRemove,\n            selectControlTextStyle,\n            aboveSelectControl,\n            customLeftIconSource,\n            customLeftIconStyles,\n            selectedOptionIndex,\n        },\n        ref,\n    ) => {\n        const rotateAnimation = useRef(new Animated.Value(0)).current;\n\n        useEffect(() => {\n            if (animated) {\n                Animated.timing(rotateAnimation, {\n                    toValue: isOpened ? 1 : 0,\n                    duration: animationDuration,\n                    useNativeDriver: true,\n                }).start();\n            }\n        }, [rotateAnimation, isOpened, animated]);\n\n        const rotate = rotateAnimation.interpolate({\n            inputRange: [0, 1],\n            outputRange: ['0deg', '180deg'],\n        });\n\n        const onPressRemove = (option: OptionType | null = null) => {\n            if (!disabled) {\n                let removedOption = selectedOption;\n                let removedOptionIndex = selectedOptionIndex;\n                if (multiSelection) {\n                    let removedSelectedOptions: null | OptionType[] = [];\n                    removedSelectedOptions = (\n                        selectedOption as OptionType[]\n                    ).filter(\n                        (selected) =>\n                            selected.value !== (option as OptionType).value,\n                    );\n                    if (removedSelectedOptions.length === 0) {\n                        removedSelectedOptions = null;\n                    }\n                    const foundIndex = options.findIndex(\n                        ({ value }) => value === option?.value,\n                    );\n                    removedOptionIndex = foundIndex;\n                    removedOption = option;\n                    const resolveSelectedOptionIndex = (\n                        selectedOptionIndex as number[]\n                    ).filter((item) => item !== foundIndex);\n\n                    dispatch({\n                        type: Action.SelectOption,\n                        payload: {\n                            selectedOption: removedSelectedOptions,\n                            selectedOptionIndex:\n                                resolveSelectedOptionIndex?.length > 0\n                                    ? resolveSelectedOptionIndex\n                                    : -1,\n                        },\n                    });\n                } else {\n                    dispatch({\n                        type: Action.SelectOption,\n                        payload: {\n                            selectedOption: null,\n                            selectedOptionIndex: -1,\n                        },\n                    });\n                    if (searchable) {\n                        dispatch({\n                            type: Action.SetSearchValue,\n                            payload: '',\n                        });\n                    }\n                    dispatch({\n                        type: Action.SetOptionsData,\n                        payload: options,\n                    });\n                }\n                if (onSelect) {\n                    onSelect(null, -1);\n                }\n                if (onRemove) {\n                    onRemove(removedOption, removedOptionIndex);\n                }\n            }\n        };\n\n        const [isScreenReaderEnabled, setIsScreenReaderEnabled] =\n            useState(false);\n\n        useEffect(() => {\n            if (!isAndroid) {\n                AccessibilityInfo.isScreenReaderEnabled().then((e) => {\n                    setIsScreenReaderEnabled(e);\n                });\n                AccessibilityInfo.addEventListener('change', (e) => {\n                    setIsScreenReaderEnabled(e);\n                });\n            }\n        }, []);\n\n        const isShowClearOptionButton =\n            clearable && selectedOption && !isScreenReaderEnabled;\n        const isShowClearOptionButtonA11y =\n            clearable && selectedOption && isScreenReaderEnabled && !isAndroid;\n\n        const renderArrowImage = (): ReactElement => {\n            const accessibilityLabel = 'Arrow for opening dropdown';\n            const arrow: ReactElement = animated ? (\n                <Animated.Image\n                    source={arrowImage}\n                    style={[\n                        styles.arrowIcon,\n                        { transform: [{ rotate }] },\n                        selectControlArrowImageStyle,\n                    ]}\n                />\n            ) : (\n                <Image\n                    source={arrowImage}\n                    style={[\n                        styles.arrowIcon,\n                        isOpened\n                            ? styles.arrowIconOpened\n                            : styles.arrowIconClosed,\n                        selectControlArrowImageStyle,\n                    ]}\n                />\n            );\n            if (multiSelection) {\n                return (\n                    <Pressable\n                        accessibilityLabel={accessibilityLabel}\n                        onPress={disabled ? undefined : onPressSelectControl}\n                    >\n                        {arrow}\n                    </Pressable>\n                );\n            }\n            return arrow;\n        };\n\n        const renderMultiselect = () => {\n            return (\n                <MultiSelect\n                    disabled={disabled}\n                    dispatch={dispatch}\n                    isOpened={isOpened}\n                    multiSelection={multiSelection}\n                    placeholderText={placeholderText}\n                    placeholderTextColor={placeholderTextColor}\n                    searchPattern={searchPattern}\n                    searchValue={searchValue}\n                    searchable={searchable}\n                    selectControlStyle={selectControlStyle}\n                    selectControlTextStyle={selectControlTextStyle}\n                    multiSelectionOptionStyle={multiSelectionOptionStyle}\n                    selectedOption={selectedOption as OptionType[]}\n                    setPosition={setPosition}\n                    onPressRemove={onPressRemove}\n                    onPressSelectControl={onPressSelectControl}\n                />\n            );\n        };\n\n        const renderSelection = () => {\n            const selectedOptionTyped = selectedOption as OptionType; // for proper typing\n            if (searchable) {\n                return (\n                    <SelectInput\n                        disabled={disabled}\n                        dispatch={dispatch}\n                        isOpened={isOpened}\n                        multiSelection={multiSelection}\n                        placeholderText={placeholderText}\n                        placeholderTextColor={placeholderTextColor}\n                        searchPattern={searchPattern}\n                        searchValue={searchValue}\n                        selectControlTextStyle={selectControlTextStyle}\n                        selectedOption={selectedOption}\n                        setPosition={setPosition}\n                        onPressSelectControl={onPressSelectControl}\n                    />\n                );\n            }\n            return (\n                <Text\n                    numberOfLines={1}\n                    style={[\n                        styles.text,\n                        selectControlTextStyle,\n                        {\n                            color: selectedOptionTyped?.label\n                                ? StyleSheet.flatten(selectControlTextStyle)\n                                      ?.color || COLORS.BLACK\n                                : placeholderTextColor,\n                        },\n                    ]}\n                >\n                    {selectedOptionTyped?.label || placeholderText}\n                </Text>\n            );\n        };\n\n        const resolveAccessibilityHint = () => {\n            if (!selectedOption) {\n                return undefined;\n            }\n            if (!multiSelection) {\n                const selectedOptionTyped = selectedOption as OptionType; // for proper typing\n                return `Current selected item is ${selectedOptionTyped?.label}`;\n            }\n            return 'You have selected multiple items';\n        };\n\n        const resolveContainer = () => {\n            if (multiSelection && selectedOption) {\n                return { Component: View };\n            }\n            return { Component: Pressable };\n        };\n\n        const { Component } = resolveContainer();\n\n        const shouldRenderClearButton =\n            isShowClearOptionButton && !multiSelection;\n        const shouldRenderClearButtonA11y =\n            isShowClearOptionButtonA11y && !multiSelection;\n\n        return (\n            <View style={styles.rootView}>\n                <Component\n                    ref={ref}\n                    accessibilityHint={resolveAccessibilityHint()}\n                    accessibilityLabel={\n                        isOpened\n                            ? ''\n                            : selectControlOpenDropdownA11yLabel ||\n                              'Open a dropdown'\n                    }\n                    style={[\n                        styles.container,\n                        isOpened\n                            ? aboveSelectControl\n                                ? styles.openedAbove\n                                : styles.opened\n                            : {},\n                        selectControlStyle,\n                        disabled\n                            ? [styles.disabled, selectControlDisabledStyle]\n                            : {},\n                    ]}\n                    onPress={\n                        disabled || (multiSelection && selectedOption)\n                            ? undefined\n                            : onPressSelectControl\n                    }\n                >\n                    {!!customLeftIconSource && (\n                        <View\n                            style={[\n                                styles.leftIconWrapper,\n                                styles.xIconWrapper,\n                            ]}\n                        >\n                            <Image\n                                source={customLeftIconSource}\n                                style={customLeftIconStyles}\n                            />\n                        </View>\n                    )}\n                    <View\n                        style={[\n                            styles.press,\n                            multiSelection\n                                ? styles.pressMultiSelection\n                                : styles.pressNormal,\n                        ]}\n                    >\n                        {multiSelection\n                            ? renderMultiselect()\n                            : renderSelection()}\n                    </View>\n                    <View\n                        style={[\n                            styles.iconsContainer,\n                            selectControlButtonsContainerStyle,\n                        ]}\n                    >\n                        {shouldRenderClearButton && (\n                            <ClearOption\n                                disabled={disabled}\n                                selectControlClearOptionA11yLabel={\n                                    selectControlClearOptionA11yLabel\n                                }\n                                selectControlClearOptionButtonHitSlop={\n                                    selectControlClearOptionButtonHitSlop\n                                }\n                                selectControlClearOptionButtonStyle={\n                                    selectControlClearOptionButtonStyle\n                                }\n                                selectControlClearOptionImageStyle={\n                                    selectControlClearOptionImageStyle\n                                }\n                                onPressRemove={onPressRemove}\n                            />\n                        )}\n                        {!hideSelectControlArrow && renderArrowImage()}\n                    </View>\n                </Component>\n                {shouldRenderClearButtonA11y && (\n                    <View style={styles.a11IconWrapper}>\n                        <ClearOption\n                            disabled={disabled}\n                            selectControlClearOptionA11yLabel={\n                                selectControlClearOptionA11yLabel\n                            }\n                            selectControlClearOptionButtonHitSlop={\n                                selectControlClearOptionButtonHitSlop\n                            }\n                            selectControlClearOptionButtonStyle={\n                                selectControlClearOptionButtonStyle\n                            }\n                            selectControlClearOptionImageStyle={\n                                selectControlClearOptionImageStyle\n                            }\n                            onPressRemove={onPressRemove}\n                        />\n                    </View>\n                )}\n            </View>\n        );\n    },\n);\n\ntype Styles = {\n    rootView: ViewStyle;\n    container: ViewStyle;\n    press: ViewStyle;\n    pressMultiSelection: ViewStyle;\n    pressNormal: ViewStyle;\n    text: TextStyle;\n    opened: ViewStyle;\n    openedAbove: ViewStyle;\n    disabled: ViewStyle;\n    iconsContainer: ViewStyle;\n    arrowIcon: ImageStyle;\n    arrowIconOpened: ImageStyle;\n    arrowIconClosed: ImageStyle;\n    xIconWrapper: ViewStyle;\n    leftIconWrapper: ViewStyle;\n    a11IconWrapper: ViewStyle;\n};\n\nconst styles = StyleSheet.create<Styles>({\n    rootView: {\n        position: 'relative',\n    },\n    container: {\n        height: 40,\n        flexDirection: 'row',\n        borderRadius: SHAPE,\n        borderWidth: BORDER_WIDTH,\n        backgroundColor: COLORS.WHITE,\n    },\n    press: {\n        flex: 1,\n        height: '100%',\n        paddingHorizontal: PADDING,\n        justifyContent: 'center',\n    },\n    pressMultiSelection: {\n        paddingRight: 40,\n    },\n    pressNormal: {\n        paddingRight: 55,\n    },\n    disabled: {\n        backgroundColor: COLORS.DISABLED,\n    },\n    text: {\n        fontSize: FONT_SIZE,\n        textAlign: 'left',\n    },\n    openedAbove: {\n        borderTopLeftRadius: 0,\n        borderTopRightRadius: 0,\n    },\n    opened: {\n        borderBottomLeftRadius: 0,\n        borderBottomRightRadius: 0,\n    },\n    iconsContainer: {\n        position: 'absolute',\n        right: 8,\n        top: 0,\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'row',\n        height: '100%',\n    },\n    arrowIcon: {\n        width: 25,\n        height: 25,\n        zIndex: -1,\n    },\n    leftIconWrapper: {\n        paddingLeft: 8,\n    },\n    xIconWrapper: {\n        height: '100%',\n        justifyContent: 'center',\n    },\n    arrowIconOpened: {\n        transform: [{ rotate: '180deg' }],\n    },\n    arrowIconClosed: {\n        transform: [{ rotate: '0deg' }],\n    },\n    a11IconWrapper: {\n        position: 'absolute',\n        right: -20,\n        borderWidth: 1,\n        height: '100%',\n    },\n});\n\nSelectControl.displayName = 'SelectControl';\n"],"mappings":"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"}