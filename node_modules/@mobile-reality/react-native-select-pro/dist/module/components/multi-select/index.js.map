{"version":3,"names":["React","ScrollView","StyleSheet","useWindowDimensions","parsePercentageToNumber","SelectInput","MultiSelectedOption","MultiSelect","searchable","selectControlTextStyle","selectControlStyle","selectedOption","placeholderText","placeholderTextColor","onPressRemove","disabled","dispatch","isOpened","onPressSelectControl","searchPattern","searchValue","setPosition","multiSelection","multiSelectionOptionStyle","width","selectedOptionTyped","resolveSelectedOptions","optionWidth","WIDTH_THRESHOLD","WIDTH_OFFSET","length","initialWidth","calculatedWidth","Math","floor","ratioToScreen","map","option","index","styles","multiSelectionWrapper","create","flex"],"sources":["index.tsx"],"sourcesContent":["import React, { ComponentPropsWithRef } from 'react';\nimport {\n    ScrollView,\n    StyleSheet,\n    useWindowDimensions,\n    ViewStyle,\n} from 'react-native';\n\nimport { parsePercentageToNumber } from '../../helpers';\nimport type { OptionalToRequired } from '../../helpers/types/OptionalToRequired';\nimport type {\n    OnPressSelectControlType,\n    OnSetPosition,\n    OptionType,\n    Select,\n} from '../../index';\nimport type { DispatchType, State } from '../../state/types';\nimport { SelectInput } from '../select-input';\n\nimport { MultiSelectedOption } from './components/selected-option';\n\ntype FromSelectComponentProps = Pick<\n    ComponentPropsWithRef<typeof Select>,\n    | 'selectControlTextStyle'\n    | 'placeholderText'\n    | 'selectControlStyle'\n    | 'disabled'\n    | 'searchPattern'\n    | 'searchable'\n    | 'multiSelection'\n    | 'multiSelectionOptionStyle'\n    | 'placeholderTextColor'\n>;\n\ntype SelectControlProps = OptionalToRequired<\n    FromSelectComponentProps & Pick<State, 'selectedOption'>\n>;\n\ntype Props = {\n    onPressRemove: (option: OptionType | null) => void;\n    onPressSelectControl: OnPressSelectControlType;\n} & SelectControlProps &\n    Pick<State, 'isOpened' | 'selectedOption' | 'searchValue'> & {\n        dispatch: DispatchType;\n    } & { setPosition: OnSetPosition };\n\nexport const MultiSelect = ({\n    searchable,\n    selectControlTextStyle,\n    selectControlStyle,\n    selectedOption,\n    placeholderText,\n    placeholderTextColor,\n    onPressRemove,\n    disabled,\n    dispatch,\n    isOpened,\n    onPressSelectControl,\n    searchPattern,\n    searchValue,\n    setPosition,\n    multiSelection,\n    multiSelectionOptionStyle,\n}: Props) => {\n    const { width } = useWindowDimensions();\n    const selectedOptionTyped = selectedOption as OptionType[];\n\n    const resolveSelectedOptions = () => {\n        if (!selectedOptionTyped) {\n            if (searchable) {\n                return null;\n            }\n            return (\n                <MultiSelectedOption\n                    isPlaceholder={true}\n                    option={null}\n                    optionWidth=\"100%\"\n                    placeholderText={placeholderText}\n                    placeholderTextColor={placeholderTextColor}\n                    selectControlTextStyle={selectControlTextStyle}\n                />\n            );\n        }\n\n        const optionWidth = () => {\n            const WIDTH_THRESHOLD = 100;\n            const WIDTH_OFFSET = 72;\n            const { length } = selectedOptionTyped;\n            const initialWidth = selectControlStyle\n                ? (selectControlStyle as ViewStyle).width\n                : 100;\n            let calculatedWidth = 100;\n            if (typeof initialWidth === 'number') {\n                calculatedWidth = (initialWidth - WIDTH_OFFSET) / length;\n                if (calculatedWidth < WIDTH_THRESHOLD) {\n                    return WIDTH_THRESHOLD;\n                }\n                return Math.floor(calculatedWidth);\n            }\n            if (typeof initialWidth === 'string') {\n                const ratioToScreen = Math.floor(\n                    width * (parsePercentageToNumber(initialWidth) / 100),\n                );\n                calculatedWidth = ratioToScreen / length;\n                if (calculatedWidth - WIDTH_OFFSET < WIDTH_THRESHOLD) {\n                    return WIDTH_THRESHOLD;\n                }\n                return calculatedWidth - WIDTH_OFFSET;\n            }\n            return 0;\n        };\n\n        return selectedOptionTyped.map((option: OptionType, index) => {\n            return (\n                <MultiSelectedOption\n                    key={index}\n                    option={option}\n                    optionWidth={optionWidth()}\n                    placeholderText={placeholderText}\n                    selectControlTextStyle={selectControlTextStyle}\n                    multiSelectionOptionStyle={multiSelectionOptionStyle}\n                    onPressRemove={onPressRemove}\n                />\n            );\n        });\n    };\n\n    return (\n        <ScrollView horizontal={true} style={styles.multiSelectionWrapper}>\n            {searchable && (\n                <SelectInput\n                    disabled={disabled}\n                    dispatch={dispatch}\n                    isOpened={isOpened}\n                    multiSelection={multiSelection}\n                    placeholderText={placeholderText}\n                    placeholderTextColor={placeholderTextColor}\n                    searchPattern={searchPattern}\n                    searchValue={searchValue}\n                    selectControlTextStyle={selectControlTextStyle}\n                    selectedOption={selectedOption}\n                    setPosition={setPosition}\n                    onPressSelectControl={onPressSelectControl}\n                />\n            )}\n            {resolveSelectedOptions()}\n        </ScrollView>\n    );\n};\n\ntype Styles = {\n    multiSelectionWrapper: ViewStyle;\n};\n\nconst styles = StyleSheet.create<Styles>({\n    multiSelectionWrapper: {\n        flex: 1,\n    },\n});\n"],"mappings":"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"}