import React, { useEffect, useRef } from 'react';
import { I18nManager, Keyboard, StyleSheet, TextInput } from 'react-native';
import { COLORS, FONT_SIZE } from '../../constants/styles';
import { Action } from '../../state/types';
export const SelectInput = _ref => {
  let {
    disabled,
    isOpened,
    searchValue,
    searchPattern,
    placeholderText,
    onPressSelectControl,
    dispatch,
    setPosition,
    multiSelection,
    selectedOption,
    placeholderTextColor,
    selectControlTextStyle
  } = _ref;
  const searchInputRef = useRef(null);
  useEffect(() => {
    const showSubscription = Keyboard.addListener('keyboardDidShow', () => {
      setPosition();
    });
    const hideSubscription = Keyboard.addListener('keyboardDidHide', () => {
      setPosition();
    });
    dispatch({
      type: Action.SetSearchInputRef,
      payload: searchInputRef
    });
    return () => {
      showSubscription.remove();
      hideSubscription.remove();
      dispatch({
        type: Action.SetSearchInputRef,
        payload: null
      });
    };
  }, []);

  const onChangeText = payload => {
    if (!disabled) {
      if (!isOpened) {
        dispatch({
          type: Action.Open
        });
      }

      dispatch({
        type: Action.SetSearchValue,
        payload
      });

      if (searchPattern) {
        dispatch({
          type: Action.SearchOptions,
          searchPattern,
          payload
        });
      }
    }
  };

  const resolvePlaceholder = () => {
    if (multiSelection && Array.isArray(selectedOption) && selectedOption.length > 0) {
      return '  ';
    }

    return placeholderText;
  };

  return /*#__PURE__*/React.createElement(TextInput, {
    ref: searchInputRef,
    accessibilityLabel: "Place text",
    editable: !disabled,
    placeholder: resolvePlaceholder(),
    placeholderTextColor: placeholderTextColor,
    style: disabled ? [styles.disabled, styles.text, multiSelection && {
      marginRight: 5
    }] : [styles.text, selectControlTextStyle],
    textAlign: I18nManager.isRTL ? 'right' : 'left',
    value: searchValue,
    onChangeText: onChangeText,
    onPressIn: disabled ? () => null : onPressSelectControl
  });
};
const styles = StyleSheet.create({
  text: {
    fontSize: FONT_SIZE
  },
  disabled: {
    backgroundColor: COLORS.DISABLED
  }
});
//# sourceMappingURL=index.js.map