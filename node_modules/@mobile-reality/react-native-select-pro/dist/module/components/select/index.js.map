{"version":3,"names":["React","forwardRef","useEffect","useImperativeHandle","useReducer","useRef","I18nManager","StyleSheet","useWindowDimensions","View","ANIMATION_DURATION","COLORS","ITEM_HEIGHT","MAX_HEIGHT_LIST","getSize","initialData","reducer","Action","OptionsList","SelectControl","Select","props","ref","options","onSelect","onRemove","onDropdownOpened","onDropdownClosed","noOptionsText","placeholderText","animated","animationDuration","clearable","closeDropdownOnSelect","disabled","scrollToSelectedOption","hideSelectControlArrow","defaultOption","flatListProps","searchable","searchPattern","payload","multiSelection","NoOptionsComponent","OptionComponent","customLeftIconSource","placeholderTextColor","GRAY","selectControlClearOptionA11yLabel","selectControlOpenDropdownA11yLabel","optionStyle","optionsListStyle","optionTextStyle","optionSelectedStyle","selectContainerStyle","selectControlArrowImageStyle","selectControlButtonsContainerStyle","selectControlClearOptionButtonStyle","selectControlClearOptionImageStyle","selectControlClearOptionButtonHitSlop","selectControlDisabledStyle","selectControlStyle","selectControlTextStyle","customLeftIconStyles","multiSelectionOptionStyle","state","dispatch","isOpened","selectedOption","optionsData","openedPosition","searchValue","searchedOptions","searchInputRef","selectedOptionIndex","aboveSelectControl","selectedOptionTyped","containerRef","Array","isArray","console","error","length","type","SetOptionsData","isValidPassDefaultOption","hasOwnProperty","foundIndex","findIndex","value","SelectOption","clear","open","current","Open","setPosition","close","Close","getState","hideKeyboardIfNeeded","blur","onPressOption","option","optionIndex","resolveOption","selectedOptionAsArray","foundSelectedOption","find","sOption","concat","sOptionIndex","map","item","index","some","undefined","filter","SetSearchValue","label","windowDimensions","measure","_x","_y","width","height","pageX","pageY","listHeightFromProp","flatten","maxHeight","optionHeightFromProp","optionHeight","size","sizeType","sizeFallback","screenSize","listHeight","finalHeight","isOverflow","SetPosition","top","left","isRTL","onPressSelectControl","onOutsidePress","styles","relative","create","position","displayName"],"sources":["index.tsx"],"sourcesContent":["import React, {\n    ForwardedRef,\n    forwardRef,\n    RefObject,\n    useEffect,\n    useImperativeHandle,\n    useReducer,\n    useRef,\n} from 'react';\nimport {\n    I18nManager,\n    StyleSheet,\n    TextInput,\n    useWindowDimensions,\n    View,\n    ViewStyle,\n} from 'react-native';\n\nimport {\n    ANIMATION_DURATION,\n    COLORS,\n    ITEM_HEIGHT,\n    MAX_HEIGHT_LIST,\n} from '../../constants/styles';\nimport { getSize } from '../../helpers';\nimport { initialData, reducer } from '../../state/reducer';\nimport { Action } from '../../state/types';\nimport type {\n    OnOutsidePress,\n    OnPressOptionType,\n    OnPressSelectControlType,\n    OptionType,\n    SelectProps,\n    SelectRef,\n} from '../../types';\nimport { OptionsList } from '../options-list';\nimport { SelectControl } from '../select-control';\n\nexport const Select = forwardRef(\n    (props: SelectProps, ref: ForwardedRef<SelectRef>) => {\n        const {\n            // Required\n            options,\n            // Callbacks\n            onSelect,\n            onRemove,\n            onDropdownOpened,\n            onDropdownClosed,\n            // Texts\n            noOptionsText = 'No options',\n            placeholderText = 'Select...',\n            // Animations\n            animated = false,\n            animationDuration = ANIMATION_DURATION,\n            // Behaviour\n            clearable = true,\n            closeDropdownOnSelect = true,\n            disabled = false,\n            scrollToSelectedOption = true,\n            hideSelectControlArrow = false,\n            // Additional features\n            defaultOption,\n            flatListProps,\n            // Search\n            searchable = false,\n            searchPattern = (payload: string) => `(${payload})`,\n            // Multiselect\n            multiSelection = false,\n            // Custom components\n            NoOptionsComponent,\n            OptionComponent,\n            // Custom sources\n            customLeftIconSource,\n            // Colors\n            placeholderTextColor = COLORS.GRAY,\n            // Accessibility\n            selectControlClearOptionA11yLabel,\n            selectControlOpenDropdownA11yLabel,\n            // Styles\n            optionStyle,\n            optionsListStyle,\n            optionTextStyle,\n            optionSelectedStyle,\n            selectContainerStyle,\n            selectControlArrowImageStyle,\n            selectControlButtonsContainerStyle,\n            selectControlClearOptionButtonStyle,\n            selectControlClearOptionImageStyle,\n            selectControlClearOptionButtonHitSlop,\n            selectControlDisabledStyle,\n            selectControlStyle,\n            selectControlTextStyle,\n            customLeftIconStyles,\n            multiSelectionOptionStyle,\n        } = props;\n        const [state, dispatch] = useReducer(reducer, initialData);\n        const {\n            isOpened,\n            selectedOption,\n            optionsData,\n            openedPosition,\n            searchValue,\n            searchedOptions,\n            searchInputRef,\n            selectedOptionIndex,\n        } = state;\n        const { aboveSelectControl } = openedPosition;\n        const selectedOptionTyped = selectedOption as OptionType;\n\n        const containerRef = useRef<View>(null);\n\n        useEffect(() => {\n            if (!Array.isArray(options)) {\n                // eslint-disable-next-line no-console\n                console.error('You must pass array in the options prop');\n                return;\n            }\n\n            if (options.length > 0) {\n                dispatch({ type: Action.SetOptionsData, payload: options });\n\n                const isValidPassDefaultOption =\n                    defaultOption &&\n                    // eslint-disable-next-line no-prototype-builtins\n                    defaultOption.hasOwnProperty('value') &&\n                    // eslint-disable-next-line no-prototype-builtins\n                    defaultOption.hasOwnProperty('label');\n\n                if (isValidPassDefaultOption) {\n                    const foundIndex = options.findIndex(\n                        ({ value }) => value === defaultOption.value,\n                    );\n                    dispatch({\n                        type: Action.SelectOption,\n                        payload: {\n                            selectedOption: defaultOption,\n                            selectedOptionIndex: foundIndex,\n                        },\n                    });\n                }\n            }\n        }, [options]);\n\n        useImperativeHandle(ref, () => ({\n            clear: () => {\n                dispatch({\n                    type: Action.SelectOption,\n                    payload: { selectedOption: null, selectedOptionIndex: -1 },\n                });\n                dispatch({ type: Action.SetOptionsData, payload: options });\n                if (onRemove) {\n                    onRemove(selectedOption, selectedOptionIndex);\n                }\n            },\n            open: () => {\n                if (containerRef.current && !disabled) {\n                    dispatch({\n                        type: Action.Open,\n                    });\n                    setPosition();\n                }\n            },\n            close: () => {\n                dispatch({\n                    type: Action.Close,\n                });\n            },\n            getState: () => state,\n        }));\n\n        const hideKeyboardIfNeeded = () => {\n            // TODO: Better condition handling, however, typo error appears in every combination\n            if (\n                searchInputRef &&\n                (searchInputRef as RefObject<TextInput>).current\n            ) {\n                (searchInputRef as RefObject<TextInput>)?.current?.blur();\n            }\n        };\n\n        const onPressOption: OnPressOptionType = (\n            option: OptionType,\n            optionIndex: number,\n        ) => {\n            if (closeDropdownOnSelect) {\n                dispatch({ type: Action.Close });\n            }\n\n            const resolveOption = () => {\n                if (!multiSelection) {\n                    return {\n                        selectedOption: option,\n                        selectedOptionIndex: optionIndex,\n                    };\n                }\n\n                const selectedOptionAsArray = selectedOption as\n                    | OptionType[]\n                    | null;\n                const foundSelectedOption =\n                    selectedOptionAsArray &&\n                    selectedOptionAsArray.find(\n                        (selectedOption: OptionType) =>\n                            selectedOption.value === option.value,\n                    );\n\n                if (foundSelectedOption) {\n                    return {\n                        selectedOption: selectedOptionAsArray,\n                        selectedOptionIndex:\n                            typeof selectedOptionIndex === 'number'\n                                ? selectedOptionIndex\n                                : [...selectedOptionIndex],\n                    };\n                }\n\n                const sOption = selectedOptionAsArray\n                    ? selectedOptionAsArray.concat(option)\n                    : [option];\n\n                const sOptionIndex = optionsData\n                    .map((item, index) => {\n                        if (sOption.some(({ value }) => value === item.value)) {\n                            return index;\n                        }\n                        return undefined;\n                    })\n                    .filter((item) => item !== undefined) as number[];\n\n                return {\n                    selectedOption: sOption,\n                    selectedOptionIndex:\n                        sOptionIndex.length > 0 ? [...sOptionIndex] : -1,\n                };\n            };\n\n            dispatch({\n                type: Action.SelectOption,\n                payload: {\n                    selectedOption: resolveOption().selectedOption,\n                    selectedOptionIndex: resolveOption().selectedOptionIndex,\n                },\n            });\n\n            if (searchable) {\n                if (multiSelection) {\n                    dispatch({ type: Action.SetSearchValue, payload: '' });\n                } else {\n                    dispatch({\n                        type: Action.SetSearchValue,\n                        payload: option.label,\n                    });\n                }\n            }\n            dispatch({ type: Action.SetOptionsData, payload: options });\n            if (option) {\n                hideKeyboardIfNeeded();\n            }\n        };\n\n        const windowDimensions = useWindowDimensions();\n\n        const setPosition = () => {\n            if (containerRef.current) {\n                containerRef.current.measure(\n                    (_x, _y, width, height, pageX, pageY) => {\n                        const listHeightFromProp =\n                            StyleSheet.flatten(optionsListStyle)?.maxHeight;\n\n                        const optionHeightFromProp =\n                            StyleSheet.flatten(optionStyle)?.height;\n\n                        const optionHeight = getSize({\n                            size: optionHeightFromProp,\n                            sizeType: 'height',\n                            sizeFallback: ITEM_HEIGHT,\n                            screenSize: windowDimensions.height,\n                        });\n\n                        const listHeight = getSize({\n                            size: listHeightFromProp,\n                            sizeType: 'height',\n                            sizeFallback: MAX_HEIGHT_LIST,\n                            screenSize: windowDimensions.height,\n                        });\n\n                        const finalHeight =\n                            listHeight >= optionsData.length * optionHeight\n                                ? optionsData.length * optionHeight\n                                : listHeight;\n\n                        const isOverflow =\n                            pageY + height + finalHeight >\n                            windowDimensions.height;\n\n                        dispatch({\n                            type: Action.SetPosition,\n                            payload: {\n                                width,\n                                top: isOverflow\n                                    ? pageY - finalHeight\n                                    : pageY + height,\n                                left: I18nManager.isRTL\n                                    ? windowDimensions.width - width - pageX\n                                    : pageX,\n                                aboveSelectControl: isOverflow,\n                            },\n                        });\n                    },\n                );\n            }\n        };\n\n        const onPressSelectControl: OnPressSelectControlType = () => {\n            if (isOpened) {\n                dispatch({\n                    type: Action.Close,\n                });\n                return;\n            }\n            setPosition();\n            if (containerRef.current) {\n                dispatch({\n                    type: Action.Open,\n                });\n            }\n        };\n\n        const onOutsidePress: OnOutsidePress = () => {\n            dispatch({ type: Action.Close });\n            dispatch({ type: Action.SetOptionsData, payload: options });\n            if (searchable && selectedOptionTyped?.label) {\n                dispatch({\n                    type: Action.SetSearchValue,\n                    payload: selectedOptionTyped.label,\n                });\n            }\n            hideKeyboardIfNeeded();\n        };\n\n        useEffect(() => {\n            if (isOpened) {\n                onDropdownOpened?.();\n            } else {\n                onDropdownClosed?.();\n            }\n        }, [isOpened]);\n\n        return (\n            <View\n                style={[styles.relative, selectContainerStyle]}\n                onLayout={setPosition}\n            >\n                <SelectControl\n                    ref={containerRef}\n                    aboveSelectControl={aboveSelectControl}\n                    animated={animated}\n                    animationDuration={animationDuration}\n                    clearable={clearable}\n                    customLeftIconSource={customLeftIconSource}\n                    customLeftIconStyles={customLeftIconStyles}\n                    disabled={disabled}\n                    dispatch={dispatch}\n                    hideSelectControlArrow={hideSelectControlArrow}\n                    isOpened={isOpened}\n                    multiSelection={multiSelection}\n                    multiSelectionOptionStyle={multiSelectionOptionStyle}\n                    options={options}\n                    placeholderText={placeholderText}\n                    placeholderTextColor={placeholderTextColor}\n                    searchPattern={searchPattern}\n                    searchValue={searchValue}\n                    searchable={searchable}\n                    selectControlArrowImageStyle={selectControlArrowImageStyle}\n                    selectControlButtonsContainerStyle={\n                        selectControlButtonsContainerStyle\n                    }\n                    selectControlClearOptionA11yLabel={\n                        selectControlClearOptionA11yLabel\n                    }\n                    selectControlClearOptionButtonHitSlop={\n                        selectControlClearOptionButtonHitSlop\n                    }\n                    selectControlClearOptionButtonStyle={\n                        selectControlClearOptionButtonStyle\n                    }\n                    selectControlClearOptionImageStyle={\n                        selectControlClearOptionImageStyle\n                    }\n                    selectControlDisabledStyle={selectControlDisabledStyle}\n                    selectControlOpenDropdownA11yLabel={\n                        selectControlOpenDropdownA11yLabel\n                    }\n                    selectControlStyle={selectControlStyle}\n                    selectControlTextStyle={selectControlTextStyle}\n                    selectedOption={selectedOption}\n                    selectedOptionIndex={selectedOptionIndex}\n                    setPosition={setPosition}\n                    onPressSelectControl={onPressSelectControl}\n                    onSelect={onSelect}\n                    onRemove={onRemove}\n                />\n                <OptionsList\n                    NoOptionsComponent={NoOptionsComponent}\n                    OptionComponent={OptionComponent}\n                    aboveSelectControl={aboveSelectControl}\n                    animated={animated}\n                    animationDuration={animationDuration}\n                    flatListProps={flatListProps}\n                    isOpened={isOpened}\n                    multiSelection={multiSelection}\n                    noOptionsText={noOptionsText}\n                    openedPosition={openedPosition}\n                    optionSelectedStyle={optionSelectedStyle}\n                    optionStyle={optionStyle}\n                    optionTextStyle={optionTextStyle}\n                    optionsData={optionsData}\n                    optionsListStyle={optionsListStyle}\n                    scrollToSelectedOption={scrollToSelectedOption}\n                    searchValue={searchValue}\n                    searchable={searchable}\n                    searchedOptions={searchedOptions}\n                    selectedOption={selectedOption}\n                    selectedOptionIndex={selectedOptionIndex}\n                    onOutsidePress={onOutsidePress}\n                    onPressOption={onPressOption}\n                    onSelect={onSelect}\n                />\n            </View>\n        );\n    },\n);\n\ntype Styles = {\n    relative: ViewStyle;\n};\n\nconst styles = StyleSheet.create<Styles>({\n    relative: {\n        position: 'relative',\n    },\n});\n\nSelect.displayName = 'Select';\n"],"mappings":"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"}