{"version":3,"names":[],"sources":["index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport type {\n    FlatListProps,\n    ImageSourcePropType,\n    ImageStyle,\n    Insets,\n    StyleProp,\n    TextStyle,\n    ViewStyle,\n} from 'react-native';\n\nimport type { OnChooseOption, OptionProps } from '../components/option';\nimport type { State } from '../state/types';\n\nexport type OptionTypeRequired = {\n    label: string;\n    value: string;\n};\n\nexport type OptionType<T = unknown> = OptionTypeRequired & T;\n\nexport type OptionsType = OptionType[];\n\nexport type OptionComponentProps = Pick<\n    OptionProps,\n    'isSelected' | 'option'\n> & {\n    onPressOption: OnChooseOption;\n};\n\n/**\n * `<Select />` component props\n */\nexport interface SelectProps {\n    //---REQUIRED---//\n    /**\n     *  Options to show on the list\n     *\n     *  @category Required\n     */\n    options: OptionsType;\n\n    //---CALLBACKS---//\n    /**\n     * Callback that is called when option is selected\n     *\n     * @param option Selected option\n     * @param optionIndex Selected option index\n     * @category Callback\n     */\n    onSelect?: (option: OptionType | null, optionIndex: number) => void;\n\n    /**\n     * Callback that is called when option(s) is cleared\n     *\n     * @param option removed option(s)\n     * @param optionIndex removed option(s) index(es)\n     * @category Callback\n     */\n    onRemove?: (\n        option: OptionType | OptionsType | null,\n        optionIndex: number | number[],\n    ) => void;\n\n    /**\n     * Callback that is called when dropdown is opened\n     *\n     * @category Callback\n     */\n    onDropdownOpened?: () => void;\n\n    /**\n     * Callback that is called when dropdown is closed\n     *\n     * @category Callback\n     */\n    onDropdownClosed?: () => void;\n\n    //---TEXTS---//\n    /**\n     * No options text\n     *\n     * @category Text\n     * @default \"No options\"\n     */\n    noOptionsText?: string;\n\n    /**\n     * Placeholder text\n     *\n     * @category Text\n     * @default \"Select...\"\n     */\n    placeholderText?: string;\n\n    //---ANIMATIONS---//\n    /**\n     *  If `true` toggling the select is animated\n     *\n     *  @category Animations\n     *  @default false\n     */\n    animated?: boolean;\n\n    /**\n     *  Animation duration in ms\n     *\n     *  @category Animations\n     *  @default 200\n     */\n    animationDuration?: number;\n\n    //---BEHAVIOURS---//\n    /**\n     *  If `true` enables a clear button to remove selected option\n     *\n     *  @category Behaviour\n     *  @default true\n     */\n    clearable?: boolean;\n\n    /**\n     * If `true` close a dropdown after selected option\n     *\n     * @category Behaviour\n     * @default true\n     */\n    closeDropdownOnSelect?: boolean;\n\n    /**\n     *  If `true` disable a select control\n     *\n     *  @category Behaviour\n     *  @default true\n     */\n    disabled?: boolean;\n\n    /**\n     * If `true` options list is scrolled to the selected option\n     *\n     * @category Behaviour\n     * @default true\n     */\n    scrollToSelectedOption?: boolean;\n\n    /**\n     *  If `true` hide select control arrow\n     *\n     *  @category Behaviour\n     *  @default false\n     */\n    hideSelectControlArrow?: boolean;\n\n    //---ADDITIONAL-FEATURES---//\n    /**\n     *  Set a default option\n     *  @category Additional Features\n     */\n    defaultOption?: OptionType;\n\n    /**\n     *  `FlatListProps` imported from `react-native`\n     *\n     *  @category Additional Features\n     */\n    flatListProps?: Omit<\n        FlatListProps<OptionType>,\n        'data' | 'renderItem' | 'ListEmptyComponent'\n    >;\n\n    //---SEARCH---//\n    /**\n     *  If `true` let user search in a select options by typing in select\n     *\n     *  @default false\n     *  @category Search\n     */\n    searchable?: boolean;\n    /**\n     *  Regex definition for searching options\n     *\n     *  @default (payload: string) => `(${payload})`\n     *  @category Search\n     */\n    searchPattern?: (payload: string) => string;\n\n    //---MULTISELECT---//\n    /**\n     *  if `true` then multi option can be picked\n     *\n     *  @category Multiselect\n     *  @default false\n     */\n    multiSelection?: boolean;\n\n    //---CUSTOM-COMPONENT---//\n    /**\n     * NoOptionsComponent\n     *\n     * @category Custom Component\n     */\n    NoOptionsComponent?: JSX.Element;\n    /**\n     * OptionComponent\n     *\n     * @param props OptionComponentProps\n     * @category Custom Component\n     */\n    OptionComponent?: (props: OptionComponentProps) => JSX.Element;\n\n    //---CUSTOM-SOURCES---//\n    /**\n     *  Custom left icon source\n     *\n     *  @category Custom Sources\n     */\n    customLeftIconSource?: ImageSourcePropType;\n\n    //---COLORS---//\n    /**\n     * Placeholder text color\n     *\n     * @category Colors\n     * @default \"Select...\"\n     */\n    placeholderTextColor?: string;\n\n    //---ACCESSIBILITY---//\n    /**\n     * selectControlClearOptionA11yLabel\n     *\n     * @category Accessibility\n     * @default \"Clear a chosen option\"\n     */\n    selectControlClearOptionA11yLabel?: string;\n\n    /**\n     * selectControlOpenDropdownA11yLabel\n     *\n     * @category Accessibility\n     * @default \"Open a dropdown\"\n     */\n    selectControlOpenDropdownA11yLabel?: string;\n\n    //---STYLES---//\n    /**\n     *  Style of arrow image\n     *\n     *  @category Styles\n     */\n    selectControlArrowImageStyle?: StyleProp<ImageStyle>;\n\n    /**\n     *  Style of text select control\n     *\n     *  @category Styles\n     */\n    selectControlTextStyle?: StyleProp<TextStyle>;\n\n    /**\n     *  Style of select control\n     *\n     *  @category Styles\n     */\n    selectControlStyle?: StyleProp<ViewStyle>;\n\n    /**\n     *  Style of disabled select control\n     *\n     *  @category Styles\n     */\n    selectControlDisabledStyle?: StyleProp<TextStyle>;\n\n    /**\n     *  Style of container buttons in select control\n     *\n     *  @category Styles\n     */\n    selectControlButtonsContainerStyle?: StyleProp<ViewStyle>;\n\n    /**\n     *  Style of clear option button\n     *\n     *  @category Styles\n     */\n    selectControlClearOptionButtonStyle?: StyleProp<ViewStyle>;\n\n    /**\n     *  Hit Slop for clear option button\n     *\n     *  @category Styles\n     */\n    selectControlClearOptionButtonHitSlop?: Insets;\n\n    /**\n     *  Style of clear option image\n     *\n     *  @category Styles\n     */\n    selectControlClearOptionImageStyle?: ImageStyle;\n\n    /**\n     * Style of container select control\n     *\n     * @category Styles\n     */\n    selectContainerStyle?: StyleProp<ViewStyle>;\n\n    /**\n     *  Style of options list\n     *\n     *  @category Styles\n     */\n    optionsListStyle?: StyleProp<ViewStyle>;\n\n    /**\n     * Style of single option\n     *\n     * @category Styles\n     */\n    optionStyle?: StyleProp<ViewStyle>;\n\n    /**\n     * Style of single option text\n     *\n     * @category Styles\n     */\n    optionTextStyle?: StyleProp<TextStyle>;\n\n    /**\n     * Style of selected single option\n     *\n     * @category Styles\n     */\n    optionSelectedStyle?: StyleProp<ViewStyle>;\n\n    /**\n     *  Custom left icon styles\n     *\n     *  @category Styles\n     */\n    customLeftIconStyles?: StyleProp<ImageStyle>;\n\n    /**\n     *  Custom multiselection option style\n     *\n     *  @category Styles\n     */\n    multiSelectionOptionStyle?: StyleProp<ViewStyle>;\n}\n\n/**\n * `<Select />` component ref\n */\nexport interface SelectRef {\n    /**\n     * Clear a selected option\n     */\n    clear: () => void;\n    /**\n     * Open a dropdown\n     */\n    open: () => void;\n    /**\n     * Close a dropdown\n     */\n    close: () => void;\n    /**\n     * Get current state of select\n     */\n    getState: () => State;\n}\n\n/**\n * @ignore\n */\nexport type OnPressOptionType = (\n    option: OptionType,\n    optionIndex: number,\n) => void;\n/**\n * @ignore\n */\nexport type OnPressSelectControlType = () => void;\n/**\n * @ignore\n */\nexport type OnOutsidePress = () => void;\nexport type OnSetPosition = () => void;\n"],"mappings":""}