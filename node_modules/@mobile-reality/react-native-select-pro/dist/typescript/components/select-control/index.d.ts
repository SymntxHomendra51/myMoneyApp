import React, { ComponentPropsWithRef } from 'react';
import { View } from 'react-native';
import type { OptionalToRequired } from '../../helpers/types/OptionalToRequired';
import type { Select } from '../../index';
import { DispatchType, Position, State } from '../../state/types';
import type { OnPressSelectControlType, OnSetPosition } from '../../types';
declare type FromSelectComponentProps = Pick<ComponentPropsWithRef<typeof Select>, 'selectControlStyle' | 'clearable' | 'animated' | 'animationDuration' | 'options' | 'disabled' | 'searchable' | 'searchPattern' | 'placeholderText' | 'placeholderTextColor' | 'selectControlDisabledStyle' | 'selectControlButtonsContainerStyle' | 'hideSelectControlArrow' | 'multiSelection' | 'onSelect' | 'onRemove' | 'selectControlArrowImageStyle' | 'selectControlClearOptionA11yLabel' | 'selectControlOpenDropdownA11yLabel' | 'selectControlTextStyle' | 'selectControlClearOptionButtonStyle' | 'selectControlClearOptionButtonHitSlop' | 'selectControlClearOptionImageStyle' | 'customLeftIconSource' | 'customLeftIconStyles' | 'multiSelectionOptionStyle'>;
export declare const SelectControl: React.ForwardRefExoticComponent<OptionalToRequired<{
    onPressSelectControl: OnPressSelectControlType;
} & FromSelectComponentProps & Pick<State, "isOpened" | "selectedOption" | "searchValue" | "selectedOptionIndex"> & {
    dispatch: DispatchType;
} & Pick<Position, "aboveSelectControl"> & {
    setPosition: OnSetPosition;
}> & React.RefAttributes<View>>;
export {};
