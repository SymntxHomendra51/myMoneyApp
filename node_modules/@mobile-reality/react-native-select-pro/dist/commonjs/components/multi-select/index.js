"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultiSelect = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _helpers = require("../../helpers");

var _selectInput = require("../select-input");

var _selectedOption = require("./components/selected-option");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const MultiSelect = _ref => {
  let {
    searchable,
    selectControlTextStyle,
    selectControlStyle,
    selectedOption,
    placeholderText,
    placeholderTextColor,
    onPressRemove,
    disabled,
    dispatch,
    isOpened,
    onPressSelectControl,
    searchPattern,
    searchValue,
    setPosition,
    multiSelection,
    multiSelectionOptionStyle
  } = _ref;
  const {
    width
  } = (0, _reactNative.useWindowDimensions)();
  const selectedOptionTyped = selectedOption;

  const resolveSelectedOptions = () => {
    if (!selectedOptionTyped) {
      if (searchable) {
        return null;
      }

      return /*#__PURE__*/_react.default.createElement(_selectedOption.MultiSelectedOption, {
        isPlaceholder: true,
        option: null,
        optionWidth: "100%",
        placeholderText: placeholderText,
        placeholderTextColor: placeholderTextColor,
        selectControlTextStyle: selectControlTextStyle
      });
    }

    const optionWidth = () => {
      const WIDTH_THRESHOLD = 100;
      const WIDTH_OFFSET = 72;
      const {
        length
      } = selectedOptionTyped;
      const initialWidth = selectControlStyle ? selectControlStyle.width : 100;
      let calculatedWidth = 100;

      if (typeof initialWidth === 'number') {
        calculatedWidth = (initialWidth - WIDTH_OFFSET) / length;

        if (calculatedWidth < WIDTH_THRESHOLD) {
          return WIDTH_THRESHOLD;
        }

        return Math.floor(calculatedWidth);
      }

      if (typeof initialWidth === 'string') {
        const ratioToScreen = Math.floor(width * ((0, _helpers.parsePercentageToNumber)(initialWidth) / 100));
        calculatedWidth = ratioToScreen / length;

        if (calculatedWidth - WIDTH_OFFSET < WIDTH_THRESHOLD) {
          return WIDTH_THRESHOLD;
        }

        return calculatedWidth - WIDTH_OFFSET;
      }

      return 0;
    };

    return selectedOptionTyped.map((option, index) => {
      return /*#__PURE__*/_react.default.createElement(_selectedOption.MultiSelectedOption, {
        key: index,
        option: option,
        optionWidth: optionWidth(),
        placeholderText: placeholderText,
        selectControlTextStyle: selectControlTextStyle,
        multiSelectionOptionStyle: multiSelectionOptionStyle,
        onPressRemove: onPressRemove
      });
    });
  };

  return /*#__PURE__*/_react.default.createElement(_reactNative.ScrollView, {
    horizontal: true,
    style: styles.multiSelectionWrapper
  }, searchable && /*#__PURE__*/_react.default.createElement(_selectInput.SelectInput, {
    disabled: disabled,
    dispatch: dispatch,
    isOpened: isOpened,
    multiSelection: multiSelection,
    placeholderText: placeholderText,
    placeholderTextColor: placeholderTextColor,
    searchPattern: searchPattern,
    searchValue: searchValue,
    selectControlTextStyle: selectControlTextStyle,
    selectedOption: selectedOption,
    setPosition: setPosition,
    onPressSelectControl: onPressSelectControl
  }), resolveSelectedOptions());
};

exports.MultiSelect = MultiSelect;

const styles = _reactNative.StyleSheet.create({
  multiSelectionWrapper: {
    flex: 1
  }
});
//# sourceMappingURL=index.js.map