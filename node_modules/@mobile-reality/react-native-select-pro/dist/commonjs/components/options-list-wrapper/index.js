"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OptionsListWrapper = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const OptionsListWrapper = _ref => {
  let {
    children,
    animated,
    animationDuration,
    isOpened,
    wrapperStyles
  } = _ref;
  const fadeAnimation = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  (0, _react.useEffect)(() => {
    if (animated) {
      _reactNative.Animated.timing(fadeAnimation, {
        toValue: isOpened ? 1 : 0,
        duration: animationDuration,
        useNativeDriver: true
      }).start();
    }
  }, [fadeAnimation, isOpened]);
  return animated ? /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
    pointerEvents: isOpened ? 'auto' : 'none',
    style: [wrapperStyles, {
      opacity: fadeAnimation
    }]
  }, children) : isOpened ? /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: wrapperStyles
  }, children) : null;
};

exports.OptionsListWrapper = OptionsListWrapper;
//# sourceMappingURL=index.js.map