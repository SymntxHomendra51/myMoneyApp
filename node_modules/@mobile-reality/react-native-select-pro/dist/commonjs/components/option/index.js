"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Option = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _styles = require("../../constants/styles");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Option = /*#__PURE__*/(0, _react.forwardRef)((_ref, ref) => {
  let {
    optionSelectedStyle,
    optionStyle,
    optionTextStyle,
    isSelected,
    onPressOption,
    option,
    onSelect,
    OptionComponent,
    optionIndex
  } = _ref;
  const {
    label
  } = option;

  const onChooseOption = () => {
    onPressOption(option, optionIndex);

    if (onSelect) {
      onSelect(option, optionIndex);
    }
  };

  if (OptionComponent) {
    return /*#__PURE__*/_react.default.createElement(OptionComponent, {
      isSelected: isSelected,
      option: option,
      onPressOption: onChooseOption
    });
  }

  return /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    ref: ref,
    accessibilityLabel: `Choose ${label} option`,
    accessibilityRole: "button",
    accessible: true,
    style: [styles.option, optionStyle, isSelected && [styles.selected, optionSelectedStyle]],
    onPress: onChooseOption
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    numberOfLines: 1,
    style: [styles.text, optionTextStyle]
  }, label));
});
exports.Option = Option;

const styles = _reactNative.StyleSheet.create({
  option: {
    height: _styles.ITEM_HEIGHT,
    justifyContent: 'center',
    paddingHorizontal: _styles.PADDING
  },
  text: {
    fontSize: _styles.FONT_SIZE,
    color: _styles.COLORS.BLACK,
    textAlign: 'left'
  },
  selected: {
    backgroundColor: _styles.COLORS.SELECTED
  }
});

Option.displayName = 'Option';
//# sourceMappingURL=index.js.map