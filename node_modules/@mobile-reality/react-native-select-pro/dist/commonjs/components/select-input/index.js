"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectInput = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _styles = require("../../constants/styles");

var _types = require("../../state/types");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const SelectInput = _ref => {
  let {
    disabled,
    isOpened,
    searchValue,
    searchPattern,
    placeholderText,
    onPressSelectControl,
    dispatch,
    setPosition,
    multiSelection,
    selectedOption,
    placeholderTextColor,
    selectControlTextStyle
  } = _ref;
  const searchInputRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(() => {
    const showSubscription = _reactNative.Keyboard.addListener('keyboardDidShow', () => {
      setPosition();
    });

    const hideSubscription = _reactNative.Keyboard.addListener('keyboardDidHide', () => {
      setPosition();
    });

    dispatch({
      type: _types.Action.SetSearchInputRef,
      payload: searchInputRef
    });
    return () => {
      showSubscription.remove();
      hideSubscription.remove();
      dispatch({
        type: _types.Action.SetSearchInputRef,
        payload: null
      });
    };
  }, []);

  const onChangeText = payload => {
    if (!disabled) {
      if (!isOpened) {
        dispatch({
          type: _types.Action.Open
        });
      }

      dispatch({
        type: _types.Action.SetSearchValue,
        payload
      });

      if (searchPattern) {
        dispatch({
          type: _types.Action.SearchOptions,
          searchPattern,
          payload
        });
      }
    }
  };

  const resolvePlaceholder = () => {
    if (multiSelection && Array.isArray(selectedOption) && selectedOption.length > 0) {
      return '  ';
    }

    return placeholderText;
  };

  return /*#__PURE__*/_react.default.createElement(_reactNative.TextInput, {
    ref: searchInputRef,
    accessibilityLabel: "Place text",
    editable: !disabled,
    placeholder: resolvePlaceholder(),
    placeholderTextColor: placeholderTextColor,
    style: disabled ? [styles.disabled, styles.text, multiSelection && {
      marginRight: 5
    }] : [styles.text, selectControlTextStyle],
    textAlign: _reactNative.I18nManager.isRTL ? 'right' : 'left',
    value: searchValue,
    onChangeText: onChangeText,
    onPressIn: disabled ? () => null : onPressSelectControl
  });
};

exports.SelectInput = SelectInput;

const styles = _reactNative.StyleSheet.create({
  text: {
    fontSize: _styles.FONT_SIZE
  },
  disabled: {
    backgroundColor: _styles.COLORS.DISABLED
  }
});
//# sourceMappingURL=index.js.map